#!/usr/bin/env python

import pysam
from pyfaidx import Fasta

from discart.utils import *


bam = sam_to_sorted_bam("test/test_001.sam", "tmp/test_001.sorted.bam", "tmp")
fa = "/home/youri/bio/fasta/hg38.fa"


#from string import maketrans


with Fasta(fa) as genes, pysam.AlignmentFile(bam, "rb") as fh:
        print("ALIVE")
        
        for _ in fh.fetch():
            if _.has_tag('SA'):
                for __ in [__ for __ in _.get_tag('SA').split(";") if len(__) > 0]:
                    __ = __.split(",")
                    __[1] = int(__[1]) 
                    print(_.query_name + " :  " , __)

                    a = str(genes[__[0]][__[1] - 6 - 1:__[1] - 1])
                    print ("     A   : ",a)
                    print ("     A,rc: ",revcomp(a))

                    b = str(genes[__[0]][__[1] - 1 : __[1] - 1 + 6])
                    print ("     B   : ",b)
                    print ("     B,rc: ",revcomp(b))

                    end = __[1] + bam_parse_alignment_offset(cigar_to_cigartuple(__[3]))
                    c = str(genes[__[0]][end - 6 - 1: end - 1])
                    print ("     C   : ",c)
                    print ("     C,rc: ",revcomp(c))
                    
                    #print(end)
                    # calculate alignment offset
                    # "â€¢ Sum of lengths of the M/I/S/=/X operations shall equal the length of SEQ." - sam spec
                    
